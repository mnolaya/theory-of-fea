# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(12.0, -1.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(15.0, 8.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    12.0, -1.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, -1.0), point2=
    (15.0, 8.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(15.0, 8.0), point2=(
    -1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.0, 10.0), point2=
    (0.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-1'].BaseWire(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].ConstrainedSketch(gridSpacing=0.97, name='__profile__', 
    sheetSize=38.83)
mdb.models['Model-1'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-1'].parts['Part-1'])
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.6)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=1.0)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.1)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=5.0)
mdb.models['Model-1'].parts['Part-1'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=6.0)
mdb.models['Model-1'].parts['Part-1'].deleteSeeds()
mdb.models['Model-1'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-1'].edges.getSequenceFromMask(('[#f ]', 
    ), ), number=1)
mdb.models['Model-1'].parts['Part-1'].generateMesh()
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(12.0, -1.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(15.0, 8.0))
mdb.models['Model-1'].sketches['__profile__'].Spot(point=(-1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    12.0, -1.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(12.0, -1.0), point2=
    (15.0, 8.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(15.0, 8.0), point2=(
    -1.0, 10.0))
mdb.models['Model-1'].sketches['__profile__'].Line(point1=(-1.0, 10.0), point2=
    (0.0, 0.0))
mdb.models['Model-1'].Part(dimensionality=TWO_D_PLANAR, name='Part-2', type=
    DEFORMABLE_BODY)
mdb.models['Model-1'].parts['Part-2'].BaseShell(sketch=
    mdb.models['Model-1'].sketches['__profile__'])
del mdb.models['Model-1'].sketches['__profile__']
mdb.models['Model-1'].rootAssembly.Instance(dependent=ON, name='Part-2-1', 
    part=mdb.models['Model-1'].parts['Part-2'])
mdb.models['Model-1'].parts['Part-2'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-1'].parts['Part-2'].edges.getSequenceFromMask(('[#f ]', 
    ), ), number=1)
mdb.models['Model-1'].parts['Part-2'].generateMesh()
mdb.models['Model-1'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=CPE4, elemLibrary=STANDARD), ElemType(elemCode=CPE3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Part-2'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-1'].parts['Part-2'].setElementType(elemTypes=(ElemType(
    elemCode=CPE4, elemLibrary=STANDARD), ElemType(elemCode=CPE3, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-1'].parts['Part-2'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.models['Model-1'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-1'].rootAssembly.Set(name='disp-n4', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].vertices.getSequenceFromMask(
    ('[#1 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-1', region=mdb.models['Model-1'].rootAssembly.sets['disp-n4'], u1=-0.1, 
    u2=0.1, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='disp-n3', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].vertices.getSequenceFromMask(
    ('[#8 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-2', region=mdb.models['Model-1'].rootAssembly.sets['disp-n3'], u1=0.1, 
    u2=0.1, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='disp-n2', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].vertices.getSequenceFromMask(
    ('[#4 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-3', region=mdb.models['Model-1'].rootAssembly.sets['disp-n2'], u1=0.1, 
    u2=-0.1, ur3=UNSET)
mdb.models['Model-1'].rootAssembly.Set(name='disp-n1', vertices=
    mdb.models['Model-1'].rootAssembly.instances['Part-2-1'].vertices.getSequenceFromMask(
    ('[#2 ]', ), ))
mdb.models['Model-1'].DisplacementBC(amplitude=UNSET, createStepName='Step-1', 
    distributionType=UNIFORM, fieldName='', fixed=OFF, localCsys=None, name=
    'BC-4', region=mdb.models['Model-1'].rootAssembly.sets['disp-n1'], u1=0.0, 
    u2=0.0, ur3=UNSET)
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
del mdb.models['Model-1'].parts['Part-1']
mdb.models['Model-1'].rootAssembly.regenerate()
#* FeatureError: Regeneration failed
mdb.models['Model-1'].rootAssembly.excludeFromSimulation(exclude=True, 
    instances=())
del mdb.models['Model-1'].rootAssembly.features['Part-1-1']
del mdb.jobs['Job-1']
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='Model-1', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=1, numGPUs=0, numThreadsPerMpiProcess=1, queue=None, resultsFormat=
    ODB, scratch='', type=ANALYSIS, userSubroutine='', waitHours=0, 
    waitMinutes=0)
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-DU6K9F8', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': '1 elements have missing property definitions. The elements have been identified in element set ErrElemMissingSection.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(WARNING, {'phase': BATCHPRE_PHASE, 
    'message': 'NO SECTION DEFINITIONS FOUND', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\Michael\\Documents\\abqtmp\\theory_fea\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error - Please see the  Job-1.dat file for possible error messages if the file exists.', 
    'jobName': 'Job-1'})
mdb.models['Model-1'].Material(name='Material-1')
mdb.models['Model-1'].materials['Material-1'].Elastic(table=((2500.0, 0.35), ))
mdb.models['Model-1'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-1'].parts['Part-2'].Set(faces=
    mdb.models['Model-1'].parts['Part-2'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='elem')
mdb.models['Model-1'].parts['Part-2'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-1'].parts['Part-2'].sets['elem'], sectionName='Section-1'
    , thicknessAssignment=FROM_SECTION)
mdb.models['Model-1'].rootAssembly.regenerate()
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'DESKTOP-DU6K9F8', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FILE, {'phase': BATCHPRE_PHASE, 
    'file': 'C:\\Users\\Michael\\Documents\\abqtmp\\theory_fea\\Job-1.odb', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STARTED, {'phase': STANDARD_PHASE, 
    'clientHost': 'DESKTOP-DU6K9F8', 'handle': 24344, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MEMORY_ESTIMATE, {'phase': STANDARD_PHASE, 
    'jobName': 'Job-1', 'memory': 24.0})
mdb.jobs['Job-1']._Message(PHYSICAL_MEMORY, {'phase': STANDARD_PHASE, 
    'physical_memory': 16176.0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(MINIMUM_MEMORY, {'minimum_memory': 17.0, 
    'phase': STANDARD_PHASE, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ODB_FRAME, {'phase': STANDARD_PHASE, 'step': 0, 
    'frame': 1, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(STATUS, {'totalTime': 1.0, 'attempts': 1, 
    'timeIncrement': 1.0, 'increment': 1, 'stepTime': 1.0, 'step': 1, 
    'jobName': 'Job-1', 'severe': 0, 'iterations': 1, 'phase': STANDARD_PHASE, 
    'equilibrium': 1})
mdb.jobs['Job-1']._Message(END_STEP, {'phase': STANDARD_PHASE, 'stepId': 1, 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(COMPLETED, {'phase': STANDARD_PHASE, 
    'message': 'Analysis phase complete', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_COMPLETED, {'time': 'Thu Aug 15 09:05:38 2024', 
    'jobName': 'Job-1'})
# Save by Michael on 2024_08_15-10.05.13; build 2023 2022_09_28-14.11.55 183150
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.Model(modelType=STANDARD_EXPLICIT, name='Model-2')
mdb.models['Model-2'].ConstrainedSketch(name='__profile__', sheetSize=200.0)
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(0.0, 0.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(6.0, 0.5))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(12.0, -1.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(11.0, 5.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(15.0, 8.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(6.0, 11.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(-1.0, 10.0))
mdb.models['Model-2'].sketches['__profile__'].Spot(point=(1.0, 5.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(0.0, 0.0), point2=(
    6.0, 0.5))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(6.0, 0.5), point2=(
    12.0, -1.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(12.0, -1.0), point2=
    (11.0, 5.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(11.0, 5.0), point2=(
    15.0, 8.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(15.0, 8.0), point2=(
    6.0, 11.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(6.0, 11.0), point2=(
    -1.0, 10.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(-1.0, 10.0), point2=
    (1.0, 5.0))
mdb.models['Model-2'].sketches['__profile__'].Line(point1=(1.0, 5.0), point2=(
    0.0, 0.0))
mdb.models['Model-2'].Part(dimensionality=TWO_D_PLANAR, name='Part-1', type=
    DEFORMABLE_BODY)
mdb.models['Model-2'].parts['Part-1'].BaseShell(sketch=
    mdb.models['Model-2'].sketches['__profile__'])
del mdb.models['Model-2'].sketches['__profile__']
mdb.models['Model-2'].Material(name='Material-1')
mdb.models['Model-2'].materials['Material-1'].Elastic(table=((2500.0, 0.35), ))
mdb.models['Model-2'].HomogeneousSolidSection(material='Material-1', name=
    'Section-1', thickness=None)
mdb.models['Model-2'].parts['Part-1'].Set(faces=
    mdb.models['Model-2'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), name='elem')
mdb.models['Model-2'].parts['Part-1'].SectionAssignment(offset=0.0, 
    offsetField='', offsetType=MIDDLE_SURFACE, region=
    mdb.models['Model-2'].parts['Part-1'].sets['elem'], sectionName='Section-1'
    , thicknessAssignment=FROM_SECTION)
mdb.models['Model-2'].rootAssembly.DatumCsysByDefault(CARTESIAN)
mdb.models['Model-2'].rootAssembly.Instance(dependent=ON, name='Part-1-1', 
    part=mdb.models['Model-2'].parts['Part-1'])
mdb.models['Model-2'].StaticStep(name='Step-1', previous='Initial')
mdb.models['Model-2'].parts['Part-1'].seedEdgeByNumber(constraint=FINER, edges=
    mdb.models['Model-2'].parts['Part-1'].edges.getSequenceFromMask(('[#ff ]', 
    ), ), number=1)
mdb.models['Model-2'].parts['Part-1'].generateMesh()
mdb.models['Model-2'].parts['Part-1'].deleteMesh()
mdb.models['Model-2'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPE8, elemLibrary=STANDARD), ElemType(elemCode=CPE6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-2'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-2'].parts['Part-1'].generateMesh()
mdb.models['Model-2'].parts['Part-1'].deleteMesh()
mdb.models['Model-2'].parts['Part-1'].deleteSeeds(regions=
    mdb.models['Model-2'].parts['Part-1'].edges.getSequenceFromMask(('[#ff ]', 
    ), ))
mdb.models['Model-2'].parts['Part-1'].seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['Model-2'].parts['Part-1'].edges.getSequenceFromMask(('[#ff ]', 
    ), ), number=1)
mdb.models['Model-2'].parts['Part-1'].generateMesh()
mdb.models['Model-2'].parts['Part-1'].deleteMesh()
mdb.models['Model-2'].parts['Part-1'].deleteSeeds(regions=
    mdb.models['Model-2'].parts['Part-1'].edges.getSequenceFromMask(('[#ff ]', 
    ), ))
mdb.models['Model-2'].parts['Part-1'].setValues(space=TWO_D_PLANAR, type=
    DEFORMABLE_BODY)
mdb.models['Model-2'].parts['Part-1'].regenerate()
mdb.models['Model-2'].ConstrainedSketch(name='__edit__', objectToCopy=
    mdb.models['Model-2'].parts['Part-1'].features['Shell planar-1'].sketch)
mdb.models['Model-2'].parts['Part-1'].projectReferencesOntoSketch(filter=
    COPLANAR_EDGES, sketch=mdb.models['Model-2'].sketches['__edit__'], 
    upToFeature=
    mdb.models['Model-2'].parts['Part-1'].features['Shell planar-1'])
mdb.models['Model-2'].sketches['__edit__'].delete(objectList=(
    mdb.models['Model-2'].sketches['__edit__'].geometry[7], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[8], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[9], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[2], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[3], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[4], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[5], 
    mdb.models['Model-2'].sketches['__edit__'].geometry[6]))
mdb.models['Model-2'].sketches['__edit__'].Arc3Points(point1=(-1.0, 10.0), 
    point2=(15.0, 8.0), point3=(6.0, 11.0))
mdb.models['Model-2'].sketches['__edit__'].Arc3Points(point1=(-1.0, 10.0), 
    point2=(0.0, 0.0), point3=(1.0, 5.0))
mdb.models['Model-2'].sketches['__edit__'].Arc3Points(point1=(0.0, 0.0), 
    point2=(12.0, -1.0), point3=(6.0, 0.5))
mdb.models['Model-2'].sketches['__edit__'].Arc3Points(point1=(12.0, -1.0), 
    point2=(15.0, 8.0), point3=(11.0, 5.0))
mdb.models['Model-2'].parts['Part-1'].features['Shell planar-1'].setValues(
    sketch=mdb.models['Model-2'].sketches['__edit__'])
del mdb.models['Model-2'].sketches['__edit__']
mdb.models['Model-2'].parts['Part-1'].regenerate()
mdb.models['Model-2'].parts['Part-1'].seedEdgeByNumber(constraint=FIXED, edges=
    mdb.models['Model-2'].parts['Part-1'].edges.getSequenceFromMask(('[#f ]', 
    ), ), number=1)
mdb.models['Model-2'].parts['Part-1'].generateMesh()
mdb.models['Model-2'].parts['Part-1'].setElementType(elemTypes=(ElemType(
    elemCode=CPS8, elemLibrary=STANDARD), ElemType(elemCode=CPS6M, 
    elemLibrary=STANDARD)), regions=(
    mdb.models['Model-2'].parts['Part-1'].faces.getSequenceFromMask(('[#1 ]', 
    ), ), ))
mdb.models['Model-2'].rootAssembly.regenerate()
# Save by Michael on 2024_08_15-10.15.01; build 2023 2022_09_28-14.11.55 183150
